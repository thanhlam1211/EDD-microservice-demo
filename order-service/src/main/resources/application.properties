spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect
#hibernate.connection.driver=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/order-service
spring.datasource.username=root
spring.datasource.password=lamdepzai123
spring.jpa.hibernate.ddl-auto=update

server.port=8081
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka
spring.application.name=order-service

management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always

#Resilience Properties - Provide the SAME NAME instance has been defined in @CircuitBreaker in controller
#xem cac state nhu close, open, half open -> register health indicator
resilience4j.circuitbreaker.instances.inventory.registerHealthIndicator=true 
#define buffer size
resilience4j.circuitbreaker.instances.inventory.event-consumer-buffer-size=10
#count number request fail to change state of the circuit breaker
resilience4j.circuitbreaker.instances.inventory.slidingWindowType=COUNT_BASED
#after 5 fail request change state closed to open
resilience4j.circuitbreaker.instances.inventory.slidingWindowSize=5
# set 50% request fail
resilience4j.circuitbreaker.instances.inventory.failureRateThreshold=50
#config how much time we can wait in the open state, trc khi doi tu open to half open la 5s
resilience4j.circuitbreaker.instances.inventory.waitDurationInOpenState=5s
# config how manny request allow when we in half open state to check service is working fine or not.
# If still fail -> change state to open
resilience4j.circuitbreaker.instances.inventory.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.inventory.automaticTransitionFromOpenToHalfOpenEnabled=true

#Resilience4J Timeout Properties : wait maximum 3s before terminate that call and throw exception
resilience4j.timelimiter.instances.inventory.timeout-duration=3s

#Resilience4J Retry Properties
resilience4j.retry.instances.inventory.max-attempts=3
#wait 5s to retry
resilience4j.retry.instances.inventory.wait-duration=5s

management.zipkin.tracing.endpoint=http://localhost:9411/api/v2/spans
management.tracing.sampling.probability= 1.0

# Kafka Properties
spring.kafka.bootstrap-servers=localhost:9092
#0: no wait for kafka respone -> may miss event
#1: leader write success, not wait for follower ->still may miss event
#-1: wait for all leader, and replication -> chac an nhat
spring.kafka.producer.acks=-1
#gui lai neu acks bao faild
spring.kafka.producer.retries=1

#prevent duplicate send
spring.kafka.producer.properties.[enable.idempotence]=true
spring.kafka.producer.properties.[max.in.flight.requests.per.connection]=5

#define default topic
spring.kafka.template.default-topic=notificationTopic
#for producer :define serializer string-json
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
#define mapping type package of event package;  level class
#define same token, this case is "event"
spring.kafka.producer.properties.spring.json.type.mapping=event:com.capstone.orderservice.event.OrderPlaceEvent
#logging.pattern.level=%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]
